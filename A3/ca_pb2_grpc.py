# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ca_pb2 as ca__pb2


class CertificateAuthorityServiceStub(object):
    """Define the RPC service for Certificate Authority (CA)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/CertificateAuthorityService/Register',
                request_serializer=ca__pb2.RegisterRequest.SerializeToString,
                response_deserializer=ca__pb2.RegisterResponse.FromString,
                )
        self.RequestCertificate = channel.unary_unary(
                '/CertificateAuthorityService/RequestCertificate',
                request_serializer=ca__pb2.CertificateRequest.SerializeToString,
                response_deserializer=ca__pb2.Certificate.FromString,
                )
        self.RequestCAPublicKey = channel.unary_unary(
                '/CertificateAuthorityService/RequestCAPublicKey',
                request_serializer=ca__pb2.PublicKeyRequest.SerializeToString,
                response_deserializer=ca__pb2.PublicKey.FromString,
                )
        self.VerifyCertificate = channel.unary_unary(
                '/CertificateAuthorityService/VerifyCertificate',
                request_serializer=ca__pb2.CertificateVerificationRequest.SerializeToString,
                response_deserializer=ca__pb2.CertificateVerificationResponse.FromString,
                )


class CertificateAuthorityServiceServicer(object):
    """Define the RPC service for Certificate Authority (CA)
    """

    def Register(self, request, context):
        """RPC method for client registration with the CA
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestCertificate(self, request, context):
        """RPC method for client to request its certificate from the CA
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestCAPublicKey(self, request, context):
        """RPC method for client to request Public Key of CA
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCertificate(self, request, context):
        """RPC method for client to verify a certificate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CertificateAuthorityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=ca__pb2.RegisterRequest.FromString,
                    response_serializer=ca__pb2.RegisterResponse.SerializeToString,
            ),
            'RequestCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCertificate,
                    request_deserializer=ca__pb2.CertificateRequest.FromString,
                    response_serializer=ca__pb2.Certificate.SerializeToString,
            ),
            'RequestCAPublicKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCAPublicKey,
                    request_deserializer=ca__pb2.PublicKeyRequest.FromString,
                    response_serializer=ca__pb2.PublicKey.SerializeToString,
            ),
            'VerifyCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCertificate,
                    request_deserializer=ca__pb2.CertificateVerificationRequest.FromString,
                    response_serializer=ca__pb2.CertificateVerificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CertificateAuthorityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CertificateAuthorityService(object):
    """Define the RPC service for Certificate Authority (CA)
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CertificateAuthorityService/Register',
            ca__pb2.RegisterRequest.SerializeToString,
            ca__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CertificateAuthorityService/RequestCertificate',
            ca__pb2.CertificateRequest.SerializeToString,
            ca__pb2.Certificate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestCAPublicKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CertificateAuthorityService/RequestCAPublicKey',
            ca__pb2.PublicKeyRequest.SerializeToString,
            ca__pb2.PublicKey.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CertificateAuthorityService/VerifyCertificate',
            ca__pb2.CertificateVerificationRequest.SerializeToString,
            ca__pb2.CertificateVerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MessageExchangeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReceiveEncryptedMessage = channel.unary_unary(
                '/MessageExchangeService/ReceiveEncryptedMessage',
                request_serializer=ca__pb2.EncryptedMessage.SerializeToString,
                response_deserializer=ca__pb2.Acknowledgement.FromString,
                )


class MessageExchangeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReceiveEncryptedMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageExchangeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReceiveEncryptedMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveEncryptedMessage,
                    request_deserializer=ca__pb2.EncryptedMessage.FromString,
                    response_serializer=ca__pb2.Acknowledgement.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessageExchangeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageExchangeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReceiveEncryptedMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageExchangeService/ReceiveEncryptedMessage',
            ca__pb2.EncryptedMessage.SerializeToString,
            ca__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
